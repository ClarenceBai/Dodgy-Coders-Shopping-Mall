/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (6.2.1).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package ie.ucd.dodgycoders.goodsservice.api;

import ie.ucd.dodgycoders.goodsservice.api.model.Goods;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.tags.Tag;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;

import javax.annotation.Generated;
import java.util.List;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2022-11-24T11:21:23.548Z[Europe/Dublin]")
@Validated
@Tag(name = "goods", description = "All goods in our shopping mall")
public interface GoodsApi {

    default GoodsApiDelegate getDelegate() {
        return new GoodsApiDelegate() {};
    }

    /**
     * GET /goods : Find all goods
     * Get all goods by a single call
     *
     * @return successful operation (status code 200)
     *         or Invalid itemId supplied (status code 400)
     *         or Item not found (status code 404)
     */
    @Operation(
        operationId = "goodsGet",
        summary = "Find all goods",
        tags = { "goods" },
        responses = {
            @ApiResponse(responseCode = "200", description = "successful operation", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Goods.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid itemId supplied"),
            @ApiResponse(responseCode = "404", description = "Item not found")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/goods",
        produces = { "application/json" }
    )
    default ResponseEntity<List> goodsGet(
        
    ) {
        return getDelegate().goodsGet();
    }


    /**
     * GET /goods/{itemId} : Find an item by id
     * Get an item by its id
     *
     * @param itemId Item to return (required)
     * @return successful operation (status code 200)
     *         or Invalid itemId supplied (status code 400)
     *         or Item not found (status code 404)
     */
    @Operation(
        operationId = "goodsItemIdGet",
        summary = "Find an item by id",
        tags = { "goods" },
        responses = {
            @ApiResponse(responseCode = "200", description = "successful operation", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Goods.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid itemId supplied"),
            @ApiResponse(responseCode = "404", description = "Item not found")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/goods/{itemId}",
        produces = { "application/json" }
    )
    default ResponseEntity<Goods> goodsItemIdGet(
        @Parameter(name = "itemId", description = "Item to return", required = true) @PathVariable("itemId") Long itemId
    ) {
        return getDelegate().goodsItemIdGet(itemId);
    }

}
