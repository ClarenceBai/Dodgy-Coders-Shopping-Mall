/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (6.2.1).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package ie.ucd.dodgycoders.paymentservice.api;

import ie.ucd.dodgycoders.paymentservice.api.model.Payment;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import javax.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2022-11-24T14:20:31.787Z[Europe/Dublin]")
@Validated
@Tag(name = "Payment", description = "Payments status of the orders")
public interface PaymentApi {

    /**
     * POST /payment : add new payment
     *
     * @param payment  (optional)
     * @return Invalid input (status code 405)
     */
    @Operation(
        operationId = "addPayment",
        summary = "add new payment",
        tags = { "payment" },
        responses = {
            @ApiResponse(responseCode = "405", description = "Invalid input")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/payment",
        consumes = "application/json"
    )
    ResponseEntity<Void> addPayment(
        @Parameter(name = "Payment", description = "") @Valid @RequestBody(required = false) Payment payment
    );


    /**
     * GET /payment/{paymentId} : Get all the payments
     *
     * @param paymentId ID of the payment (required)
     * @return successfully get all payments (status code 200)
     *         or Invalid ID (status code 400)
     *         or Payments not found (status code 404)
     */
    @Operation(
        operationId = "getAllPayment",
        summary = "Get all the payments",
        tags = { "payment" },
        responses = {
            @ApiResponse(responseCode = "200", description = "successfully get all payments", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Payment.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid ID"),
            @ApiResponse(responseCode = "404", description = "Payments not found")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/payment/{paymentId}",
        produces = "application/json"
    )
    ResponseEntity<Payment> getAllPayment(
        @Parameter(name = "paymentId", description = "ID of the payment", required = true) @PathVariable("paymentId") Long paymentId
    );

}
